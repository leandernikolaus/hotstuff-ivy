#lang ivy1.7

# include collections
# include order

type block
interpret block -> strlit

isolate tree = {
    

    individual genesis:block

    action add(b: block, p: block) returns (ok:bool)
    action isadded(b: block) returns (ok: bool)
    action prev(b: block) returns (p: block)
    
    specification {
        relation previous(B:block, P:block)
        relation added(B:block)
        after init {
            previous(B,P) := B = genesis & P = genesis;
            added(B) := B = genesis;
        }
        after add {
            ensure ok <-> added(p) & ~added(b);
            if ok {
                previous(b,p) := true;
                added(b) := true;
                #ancestor(B,b) := ancestor(B,p) | B = b;
            }
        }
        after isadded {
            ensure ok <-> added(b)
        }
        after prev {
            ensure (added(b) & previous(b,p)) | (~added(b) & p = genesis);
        }
        
        invariant previous(genesis, genesis)
        invariant previous(B,P) -> added(B)
        
    }

    implementation {
        function previousmap(B:block):block
        relation iadded(B:block)
        after init {
            genesis := "gen";
            previousmap(B) := genesis;
            iadded(B) := B = genesis;
        }

        implement add {
            ok := (~iadded(b)) & iadded(p);
            if ok {
                iadded(b) := true;
                previousmap(b) := p;
            } 
        }
        implement isadded {
            ok := iadded(b);
        }
        
        invariant iadded(B) <-> added(B)
        implement prev {
            p := previousmap(b);
        }
        invariant previousmap(B) = P & iadded(B) -> previous(B,P)
        invariant ~iadded(B) -> previousmap(B) = genesis
        invariant previous(B,P) -> previousmap(B) = P
        

        
    }
    export add
    export isadded
    export prev
}

# isolate atree = {
#     action anc(b: block, c: block) returns (aok:bool)
#     action add(b: block, p: block) returns (ok:bool)


#     specification {
#         relation ancestor(B:block,C:block)
#         after init {
#             ancestor(B,P) := B = P;
#         }
#         after add {
#             if ok {
#                 ancestor(B,b) := ancestor(B,p) | B = b;
#             }
#         }
#         after anc {
#             ensure aok <-> ancestor(b,c)
#         }

#         invariant tree.previous(B,P) -> B = tree.genesis | ~tree.previous(P,B)
#         invariant tree.previous(B,P) & tree.previous(B,PP) -> P = PP
#         invariant tree.previous(B,P) -> tree.added(P)
#         invariant ancestor(B,B)
#         invariant ~tree.added(B) & ancestor(B,P) -> B = P
#         invariant ancestor(P,B) & P ~= B -> tree.added(P) & tree.added(B)
#         invariant tree.previous(B,P) -> ancestor(P,B)
#         invariant ancestor(B,C) & ancestor(C,D) -> ancestor(B,D)
#         invariant tree.previous(B,P) -> ancestor(P,B)
#         invariant ancestor(B,C) & ancestor(C,B) -> B = C
#         invariant ancestor(B,C) & tree.previous(C,P) & B ~= C -> ancestor(B,P)
        
#     }
#     implementation {
#         instantiate height: unbounded_sequence
#         function h(B:block):height
#         after init {
#             h(B) := 0;
#         }
#         implement add {
#             ok := tree.add(b,p);
#             if ok {
#                 h(b) := h(p).next();
#             }
#         }
        
#         invariant ancestor(P,B) & B ~= P -> h(P) < h(B)
#         invariant h(tree.genesis) = 0
        
#         implement anc {
#             aok := b = c;
#             if tree.isadded(c) & h(b) < h(c) {
#                 var p := c;
#                 var i := h(c);
#                 while i > h(b)
#                     invariant 0 <= i & i <= h(c)
#                     invariant i = h(p)
#                     invariant tree.previous(p,tree.prev(p))
#                     invariant i > h(b) -> h(tree.prev(p)) < i
#                     invariant ancestor(p,c)
#                     invariant ancestor(b,c) -> ancestor(b,p)
#                     invariant aok <-> p = b
#                 {
#                     p := tree.prev(p);
#                     i := h(p);
#                     aok := p = b; # this should be outside of the loop, but somehow that gives an errlr
#                 }   
#             }
#         }
#     }

#     export anc
#     export add


# } with tree